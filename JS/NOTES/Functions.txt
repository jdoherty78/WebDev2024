FUNCTIONS:

example.
alert("leaveHouse");
alert("moveRight");
alert("moveRight");
alert("moveUp");
alert("moveUp");
alert("moveUp");
alert("moveLeft");
alert("moveDown");
alert("enterHouse");

CREATE:
function getMilk() {
    console.log("leaveHouse");
    console.log("moveRight");
    console.log("moveRight");
    console.log("moveUp");
    console.log("moveUp");
    console.log("moveUp");
    console.log("moveUp");
    console.log("moveRight");
    console.log("moveRight");
    console.log("buy" + bottles + "Milk");
    console.log("moveLeft");
    console.log("moveLeft");
    console.log("moveDown");
    console.log("moveDown");
    console.log("moveDown");
    console.log("moveDown");
    console.log("moveLeft");
    console.log("moveLeft");
    console.log("enterHouse");
}

getMilk();


**********************************************************************************
Karel the Robot:

stanford.edu/~cpiech/karel/ide.html
-change world to 5x5
-write code in function main();
--executed when run selected
************************************************************************************
/**
 * Welcome to the Stanford Karel IDE.
 * This is a free space for you to 
 * write any Karel program you want.
 **/
function main(){
   //your code here
putBeeper();
diagMoveBeeper();
diagMoveBeeper();
diagMoveBeeper();
diagMoveBeeper();
}

function diagMoveBeeper() {
move();
turnLeft();
move();
putBeeper();
turnRight();
}

***********************************************************

CHECKERBOARD:
function main(){
   beepersRight();
   goUpTurnLeft();
   beepersLeft();
   goUpTurnRight();
      beepersRight();
   goUpTurnLeft();
   beepersLeft();
   goUpTurnRight();
      beepersRight();
}
 
function goUpTurnRight() {
   turnRight();
   move();
   turnRight();
}
 
function goUpTurnLeft() {
   turnLeft();
   move();
   turnLeft();
}
 
function beepersRight() {
   putBeeper();
   move();
   move();
   putBeeper();
   move();
   move();
   putBeeper();  
}
 
function beepersLeft() {
   move();
   putBeeper();
   move();
   move();
   putBeeper();
   move();
}
*************************************************************************


Higher Order Function
ie.   addEventListener is higher order function, able to take another function as input

document.addEventListener("keypress", respondToKey(event));

function respondToKey(event) {
  console.log("Key pressed.");
}



Callback Function

-functin passed in as an input
-allows to wait for something to finishing happening, then the callback function
gets called and executed


document.addEventListener("keypress", respondToKey(event));

function respondToKey(event) {
  console.log("Key pressed.");
}


wiki javascript
-inspect h1 title


$0.addEventListener("click", function() {
  console.log(event);
});


---the same as---

$0.addEventListener("click", function(e) {
  console.log(e);
});

*****************************************************

function sayHi(to) {
  console.log("Hello, " + to);
}

sayHi("Joe");
  Hello, Joe


function sayHi(name) {
  console.log("Hello, " + name);
}

sayHi("Tom!")
 Hello, Tom!


**********************************************

-when an event does happen, it will create an event object
-we're calling that eventThatHappened in the example
-the event object will capture a number of characteristics about that event
-


function anotherAddEventListener(typeOfEvent, callback) {
  // Detect Event Code ...

var eventThatHappened = {
  eventType: "keydown",
  key: "p",
  durationOfKeydown: 2
  }
if (eventThatHappened.eventType === typeOfEvent) {
  callback(eventThatHappened);
  }
}

anotherAddEventListener("keydown", function(event) {
  console.log(event);
});

